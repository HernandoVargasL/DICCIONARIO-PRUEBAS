define(["dojo/_base/declare", "esri/graphic", "esri/layers/GraphicsLayer", "esri/InfoTemplate", "esri/graphicsUtils", "esri/Color", "esri/symbols/SimpleMarkerSymbol", "esri/symbols/SimpleLineSymbol", "esri/symbols/SimpleFillSymbol", "esri/renderers/SimpleRenderer", "esri/SpatialReference", "esri/geometry/webMercatorUtils", "esri/request", "esri/config", "dojo/_base/url", "dojo/_base/lang"], function (e, t, r, i, n, s, o, a, h, l, u, d, c, _, f, m) { return e([r], { _terrafomer: "undefined" != typeof Terraformer ? Terraformer : null, constructor: function (e) { this._validState = !0, this._url = e.url, this._data = e.data, this._inSpatialReference = new u({ wkid: 4326 }), this._outSpatialReference = null, !1 !== e.infoTemplate && this.setInfoTemplate(e.infoTemplate || new i("GeoJSON Data", "${*}")), e.renderer && (this.renderer = e.renderer), this._setDefaultSymbols(), this._setCorsSevers(), this._setXhrDefaults(1e4), this._maxDraw = e.maxdraw || 1e3, this._drawCount = 0, this._drawCountTotal = 0, this.extent = null, e.onLoad && "function" == typeof e.onLoad && (this.onLoad = e.onLoad), this._updateState() }, _setDefaultSymbols: function () { function e(e, t) { function r(e, t) { return Math.floor(Math.random() * (t - e + 1)) + e } switch (e) { case "red": return new s([r(150, 255), r(0, 255), r(0, 255), t]); case "green": return new s([r(0, 155), r(150, 255), r(0, 155), t]); case "blue": return new s([r(0, 255), r(0, 255), r(150, 255), t]) } } this._simplePointSym = new o(o.STYLE_CIRCLE, 8, new a(a.STYLE_SOLID, e("blue", .5), 1), e("blue", .75)), this._simpleLineSym = new a(a.STYLE_SOLID, e("red", .9), 2), this._simplePolygonSym = new h("solid", new a("solid", new s([50, 50, 50, .15]), 1), e("green", .15)) }, _setCorsSevers: function () { if (_.defaults.io.corsEnabledServers.push("http://sampleserver6.arcgisonline.com"), this._url) { var e = new f(this._url), t = e.scheme, r = e.host, i = (e.port, t + "://" + r); t && r && _.defaults.io.corsEnabledServers.push(i) } }, _setXhrDefaults: function (e) { _.defaults.io.postLength = e }, _updateState: function () { this._inSpatialReference || (this._validState = !1, console.error("GeoJsonLayer Error: Invalid SpatialReference.")), this._terrafomer || (this._validState = !1, console.error("GeoJsonLayer Error: Invalid Terraformer reference. Please add a reference to your html page.")) }, _setMap: function (e, t) { var r = this.inherited(arguments); return this._validState ? (this._outSpatialReference = e.spatialReference, this._loadGeoJson(), r) : r }, _unsetMap: function () { return this.inherited(arguments) }, add: function (e) { this._validState && (this.inherited(arguments), this._incrementDrawCount()) }, clear: function () { return this._drawCount = 0, this._drawCountMax = 0, this.inherited(arguments) }, _loadGeoJson: function () { this._data ? this._getGeoJson(this._data) : this._url && this._getGeoJsonXhr(this._url) }, _getGeoJsonXhr: function (e) { c({ url: e, timeout: 3e5, handleAs: "json" }).then(m.hitch(this, this._getGeoJson), m.hitch(this, this._errorGetGeoJsonXhr)) }, _getGeoJson: function (e) { if ("FeatureCollection" === e.type && e.features) { var t = this._terraformerConverter(e); this._addGraphics(t) } else console.error("GeoJsonLayer Error: Invalid GeoJSON FeatureCollection. Check url or data structure.") }, _terraformerConverter: function (e) { var t; return t = new this._terrafomer.Primitive(e), this._terrafomer.ArcGIS.convert(t) }, _errorGetGeoJsonXhr: function (e) { console.error("GeoJsonLayer Error: Couldn't load GeoJSON. Check url. File must be on the same domain or server must be CORS enabled.\n\n" + e) }, _incrementDrawCount: function () { this._drawCount++, this._drawCount === this._drawCountTotal && (this._updateLayerExtent(), this.onUpdateEnd()) }, _decrementDrawCount: function () { this._drawCountTotal-- }, _updateLayerExtent: function () { var e; this.graphics.length && (e = n.graphicsExtent(this.graphics)), this.extent = e }, _getEsriSymbol: function (e) { var t; switch (e) { case "point": case "multipoint": t = this._simplePointSym; break; case "polyline": t = this._simpleLineSym; break; case "polygon": case "extent": t = this._simplePolygonSym }return t }, _addGraphicToLayer: function (e) { 4326 !== this._inSpatialReference.wkid && 102100 !== this._inSpatialReference.wkid || this.add(e) }, _createGraphic: function (e) { var r; return r = new t(e), this.renderer && this.renderer.symbol ? r.setSymbol(this.renderer.symbol) : r.setSymbol(this._getEsriSymbol(r.geometry.type)), r.geometry.setSpatialReference(this._inSpatialReference), r }, _addGraphics: function (e) { var t, r, i; for (e.length > this._maxDraw ? (this._drawCountTotal = this._maxDraw, console.warn("GeoJsonLayer Warning: Large dataset detected. Only drawing the first " + this._maxDraw + " features!")) : this._drawCountTotal = e.length, t = 0; t < this._drawCountTotal; t++)r = e[t], i = this._createGraphic(r), this._addGraphicToLayer(i); this.onLoad(this) } }) });